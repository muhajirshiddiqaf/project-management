name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop, feature/* ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '18'
  POSTGRES_VERSION: '15-alpine'
  REDIS_VERSION: '7-alpine'

jobs:
  # Lint and Format Check
  lint-check:
    name: Lint and Format Check
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: |
        npm ci
        cd backend && npm ci
        cd ../frontend && npm ci

    - name: Run ESLint on backend
      run: |
        cd backend
        npx eslint src/ --ext .js --format=compact

    - name: Run ESLint on frontend
      run: |
        cd frontend
        npx eslint src/ --ext .js,.jsx --format=compact

    - name: Check code formatting
      run: |
        cd backend && npx prettier --check src/
        cd ../frontend && npx prettier --check src/

  # Test and Build Backend
  test-backend:
    name: Test Backend
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:${{ env.POSTGRES_VERSION }}
        env:
          POSTGRES_PASSWORD: password123
          POSTGRES_DB: project_management_test
          POSTGRES_USER: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:${{ env.REDIS_VERSION }}
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: backend/package-lock.json

    - name: Install backend dependencies
      run: |
        cd backend
        npm ci

    - name: Run database migrations
      run: |
        cd backend
        npm run migrate
      env:
        DATABASE_URL: postgresql://postgres:password123@localhost:5432/project_management_test
        NODE_ENV: test
        JWT_SECRET: test_secret

    - name: Run backend tests
      run: |
        cd backend
        npm test
      env:
        DATABASE_URL: postgresql://postgres:password123@localhost:5432/project_management_test
        NODE_ENV: test
        JWT_SECRET: test_secret

    - name: Run backend tests with coverage
      run: |
        cd backend
        npm run test:coverage
      env:
        DATABASE_URL: postgresql://postgres:password123@localhost:5432/project_management_test
        NODE_ENV: test
        JWT_SECRET: test_secret

    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./backend/coverage/lcov.info
        flags: backend
        name: backend-coverage

  # Test and Build Frontend
  test-frontend:
    name: Test Frontend
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install frontend dependencies
      run: |
        cd frontend
        npm ci

    - name: Run frontend tests
      run: |
        cd frontend
        npm test -- --coverage --watchAll=false --passWithNoTests

    - name: Upload frontend coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./frontend/coverage/lcov.info
        flags: frontend
        name: frontend-coverage

    - name: Build frontend
      run: |
        cd frontend
        npm run build

  # Docker Build and Test
  docker-build:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build and test Docker images
      run: |
        docker-compose build
        docker-compose config

    - name: Test Docker containers
      run: |
        docker-compose up -d postgres redis
        sleep 15
        docker-compose ps
        docker-compose logs
        docker-compose down

    - name: Build and push Docker images
      if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
      run: |
        docker build -t ${{ secrets.DOCKER_USERNAME }}/project-management-backend:${{ github.sha }} ./backend
        docker build -t ${{ secrets.DOCKER_USERNAME }}/project-management-frontend:${{ github.sha }} ./frontend
        docker push ${{ secrets.DOCKER_USERNAME }}/project-management-backend:${{ github.sha }}
        docker push ${{ secrets.DOCKER_USERNAME }}/project-management-frontend:${{ github.sha }}

  # Security Scan
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

    - name: Run npm audit
      run: |
        cd backend && npm audit --audit-level=moderate
        cd ../frontend && npm audit --audit-level=moderate

  # Performance Test
  performance-test:
    name: Performance Test
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend]

    services:
      postgres:
        image: postgres:${{ env.POSTGRES_VERSION }}
        env:
          POSTGRES_PASSWORD: password123
          POSTGRES_DB: project_management_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}

    - name: Install dependencies
      run: |
        cd backend
        npm ci

    - name: Run performance tests
      run: |
        cd backend
        npm run test:performance
      env:
        DATABASE_URL: postgresql://postgres:password123@localhost:5432/project_management_test
        NODE_ENV: test

  # Code Quality Check
  code-quality:
    name: Code Quality
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run SonarCloud Scan
      uses: SonarSource/sonarcloud-github-action@master
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  # Documentation Check
  docs-check:
    name: Documentation Check
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Check documentation
      run: |
        echo "Checking documentation completeness..."
        test -f README.md
        test -f documents/PRD_System_Management_Project_Quotation.md
        test -f documents/Development_Task_List.md
        test -f documents/Docker_Setup_Guide.md
        echo "✅ All documentation files present"

    - name: Validate markdown files
      run: |
        echo "Validating markdown syntax..."
        # Add markdown linting if needed
        echo "✅ Markdown validation passed"

  # Deploy to Staging (on develop branch)
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend, docker-build, security-scan]
    if: github.ref == 'refs/heads/develop'
    environment: staging

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deploy to staging environment
      run: |
        echo "Deploying to staging environment..."
        # Add staging deployment commands here
        # Example: docker-compose -f docker-compose.staging.yml up -d

    - name: Run health checks
      run: |
        echo "Running health checks..."
        # Add health check commands here
        sleep 30
        curl -f http://staging-url/health || exit 1

    - name: Notify staging deployment
      run: |
        echo "Staging deployment completed successfully!"

  # Deploy to Production (on main branch)
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend, docker-build, security-scan]
    if: github.ref == 'refs/heads/main'
    environment: production

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deploy to production environment
      run: |
        echo "Deploying to production environment..."
        # Add production deployment commands here
        # Example: docker-compose -f docker-compose.prod.yml up -d

    - name: Run health checks
      run: |
        echo "Running health checks..."
        # Add health check commands here
        sleep 30
        curl -f http://production-url/health || exit 1

    - name: Notify production deployment
      run: |
        echo "Production deployment completed successfully!"

  # Slack Notification
  notify:
    name: Notify Team
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always()

    steps:
    - name: Notify Slack
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#deployments'
        webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}
      if: always()
